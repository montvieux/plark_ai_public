FROM ubuntu:18.04

ARG PYTORCH_DEPS=cpuonly
ARG PYTHON_VERSION=3.7

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
         build-essential \
         cmake \
         git \
         curl \
         ca-certificates \
         ffmpeg \
         libjpeg-dev \
         libpng-dev \
         libglib2.0-0 && \
     rm -rf /var/lib/apt/lists/*


# Install Anaconda and dependencies
RUN curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
     /opt/conda/bin/conda install -y python=$PYTHON_VERSION numpy pyyaml scipy ipython mkl mkl-include && \
     /opt/conda/bin/conda install -y pytorch $PYTORCH_DEPS -c pytorch && \
     /opt/conda/bin/conda clean -ya
ENV PATH /opt/conda/bin:$PATH

# RUN pip install --upgrade pip
RUN pip uninstall -y opencv-python && \
    pip install opencv-python-headless
ADD requirements.txt /usr/local/requirements.txt
RUN pip install --upgrade -r /usr/local/requirements.txt

# Set up the Chrome PPA
# RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
# RUN echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list

# Update the package list and install chrome
# RUN apt-get update -y
# RUN apt-get install -y google-chrome-stable 

# Set up Chromedriver Environment variables
# ENV CHROMEDRIVER_DIR /chromedriver
# RUN mkdir -p $CHROMEDRIVER_DIR


# Download and install Chromedriver
# RUN wget -q --continue -P $CHROMEDRIVER_DIR "http://chromedriver.storage.googleapis.com/80.0.3987.106/chromedriver_linux64.zip"
# RUN unzip $CHROMEDRIVER_DIR/chromedriver* -d $CHROMEDRIVER_DIR
# RUN chmod +x $CHROMEDRIVER_DIR/chromedriver

# Put Chromedriver into the PATH
# ENV PATH $CHROMEDRIVER_DIR:$PATH


ADD run_servers.sh /run_servers.sh
ADD plark_robot_tests /plark_robot_tests
# set working directory
WORKDIR /
CMD sh run_servers.sh && tail -f /dev/null

#############################
# Instructions
#############################
# STEPS For Container
# Build the docker image
#       - sudo docker build -t plark_ai .
# Each time a new conda package or pip requirement is needed, this command must be rerun to rebuild the image
# Note that most of the installed packages from before are cached by docker to save time
# To run the docker container:
#       - sudo docker run --runtime=nvidia -v /home/aidanjones/repos/plark_ai/Components:/Components -v /datasets/plark_ai:/data -p 8890:8888 -p 5001:5000 -it --shm-size=8192m plark_ai /bin/bash 
#       - docker run -v /Users/aidanjones/repos/plark_ai_public/Components:/Components -v /Users/aidanjones/repos/plark_ai_public/data:/data -p 8890:8888 -p 5001:5000 -it --shm-size=8192m plark_ai /bin/bash 
# STEPS FOR JUPYTER
# Inside the container, run jupyter:
#        - jupyter notebook --ip 0.0.0.0 --port 8888 --no-browser --allow-root --NotebookApp.iopub_data_rate_limit=1000000 --NotebookApp.token='' & 
# Note: the port 8888 is the docker containers local port which you mapped to port 8892 on the server
# http://localhost:8890/tree
# jupyter notebook password
# cloudywithachanceofamonia
# sh run_servers.sh &